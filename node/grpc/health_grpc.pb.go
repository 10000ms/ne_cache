// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NodeHealthClient is the client API for NodeHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeHealthClient interface {
	NodeHealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type nodeHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeHealthClient(cc grpc.ClientConnInterface) NodeHealthClient {
	return &nodeHealthClient{cc}
}

func (c *nodeHealthClient) NodeHealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/ne_cache.node.grpc.NodeHealth/NodeHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeHealthServer is the server API for NodeHealth service.
// All implementations should embed UnimplementedNodeHealthServer
// for forward compatibility
type NodeHealthServer interface {
	NodeHealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

// UnimplementedNodeHealthServer should be embedded to have forward compatible implementations.
type UnimplementedNodeHealthServer struct {
}

func (UnimplementedNodeHealthServer) NodeHealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeHealthCheck not implemented")
}

// UnsafeNodeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeHealthServer will
// result in compilation errors.
type UnsafeNodeHealthServer interface {
	mustEmbedUnimplementedNodeHealthServer()
}

func RegisterNodeHealthServer(s grpc.ServiceRegistrar, srv NodeHealthServer) {
	s.RegisterService(&_NodeHealth_serviceDesc, srv)
}

func _NodeHealth_NodeHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHealthServer).NodeHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ne_cache.node.grpc.NodeHealth/NodeHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHealthServer).NodeHealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeHealth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ne_cache.node.grpc.NodeHealth",
	HandlerType: (*NodeHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeHealthCheck",
			Handler:    _NodeHealth_NodeHealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/grpc/health.proto",
}
